.FFF..F....FFF.FF..FF......FF.....F.FF....FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF..F...FF..FF.F.F...FFFF...........F....FFF...F..FFFFF...F..F.FF..FF..FFF..FFFFFFFF.FF.....FFFFFF..FFF.FFFFFFFFF.FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.FFF.FFFFFFFFFFFFFFFFFFF..F..FFFFFFF....F........FFF...F.FF.FFFFFFFF.FFFFFFFF....FFFF......FFFF..FFFFFF.FFFFFFFFFF.F............FFF...FFFFFFFFFFFFFFFFFFFFFFF....FFFFFFFFFFFFFFFFFFFFF.FFF.FFF.FFF.FFF.FF.FF...FFF...FFFFFFFFF.F..F..F.FFF.FF..FF..FFF.F.F.FFF.FFF.FFF.FFF.FFF.FFF.FFF.FFF.FF.FF.F.FFFFFF.FFFF.FF.FF.FFFF.FFFFFFFFFFFFFFFF...........F.F.F.....FFFFFFF.F.FF..FFF.....FFFFF.FF.FFFFFFF.F.FFFFFFF..F...F.FFFFF.....FFF.F.F.FFFFF.FFFFFFFFFFF..FF....F..FFF..FFF..FFF..FFFFFF.FF..FFFFFF.F....FFFFFF.F..FFFFFFF.FFFF.FFFFFFFFFF...........FFFFFFFFFF.F.FFF.FFFFF.F....FFFF..FF
======================================================================
FAIL: test_b: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'bottom'

======================================================================
FAIL: test_b:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'bottom auto'

======================================================================
FAIL: test_ba (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background'

======================================================================
FAIL: test_baal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment scroll' and test: 'background-attachment local'

======================================================================
FAIL: test_baclc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip no-clip' and test: 'background-clip content-box'

======================================================================
FAIL: test_baclp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip' and test: 'background-clip padding-box'

======================================================================
FAIL: test_bact (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background-color transparent'

======================================================================
FAIL: test_bain (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'break-inside' and test: 'background-image none'

======================================================================
FAIL: test_ban (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background none'

======================================================================
FAIL: test_baoc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-color' and test: 'background-origin content-box'

======================================================================
FAIL: test_baop (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-position' and test: 'background-origin padding-box'

======================================================================
FAIL: test_barro (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment scroll' and test: 'background-repeat round'

======================================================================
FAIL: test_bars (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size' and test: 'background-repeat space'

======================================================================
FAIL: test_basico (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size contain' and test: 'background-size cover'

======================================================================
FAIL: test_bbc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-break continuous' and test: 'border-bottom-color'

======================================================================
FAIL: test_bbn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-break continuous' and test: 'border-bottom none'

======================================================================
FAIL: test_bd: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border'

======================================================================
FAIL: test_bd:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border none'

======================================================================
FAIL: test_bdb: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom'

======================================================================
FAIL: test_bdb:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom none'

======================================================================
FAIL: test_bdbc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom-color'

======================================================================
FAIL: test_bdbr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break'

======================================================================
FAIL: test_bdbr:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break clone'

======================================================================
FAIL: test_bdbr:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break slice'

======================================================================
FAIL: test_bdbs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom-style'

======================================================================
FAIL: test_bdbs:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom-style none'

======================================================================
FAIL: test_bdbw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-bottom-width'

======================================================================
FAIL: test_bdc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-color'

======================================================================
FAIL: test_bdcl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-collapse'

======================================================================
FAIL: test_bdcl:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-collapse collapse'

======================================================================
FAIL: test_bdcl:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-collapse separate'

======================================================================
FAIL: test_bdl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left'

======================================================================
FAIL: test_bdl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left none'

======================================================================
FAIL: test_bdlc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left-color'

======================================================================
FAIL: test_bdls: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left-style'

======================================================================
FAIL: test_bdls:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left-style none'

======================================================================
FAIL: test_bdlw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-left-width'

======================================================================
FAIL: test_bdr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right'

======================================================================
FAIL: test_bdr:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right none'

======================================================================
FAIL: test_bdrc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right-color'

======================================================================
FAIL: test_bdrs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right-style'

======================================================================
FAIL: test_bdrs:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right-style none'

======================================================================
FAIL: test_bdrw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-right-width'

======================================================================
FAIL: test_bds: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style'

======================================================================
FAIL: test_bds:db (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style double'

======================================================================
FAIL: test_bds:ds (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style dashed'

======================================================================
FAIL: test_bds:dt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style dotted'

======================================================================
FAIL: test_bds:g (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style groove'

======================================================================
FAIL: test_bds:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style hidden'

======================================================================
FAIL: test_bds:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style inset'

======================================================================
FAIL: test_bds:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style none'

======================================================================
FAIL: test_bds:o (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style outset'

======================================================================
FAIL: test_bds:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style ridge'

======================================================================
FAIL: test_bds:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-style solid'

======================================================================
FAIL: test_bdt: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top'

======================================================================
FAIL: test_bdt:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top none'

======================================================================
FAIL: test_bdtc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top-color'

======================================================================
FAIL: test_bdts: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top-style'

======================================================================
FAIL: test_bdts:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top-style none'

======================================================================
FAIL: test_bdtw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-top-width'

======================================================================
FAIL: test_bdw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'border-width'

======================================================================
FAIL: test_bg: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background'

======================================================================
FAIL: test_bg:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background none'

======================================================================
FAIL: test_bga: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-attachment'

======================================================================
FAIL: test_bga:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-attachment fixed'

======================================================================
FAIL: test_bga:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-attachment local'

======================================================================
FAIL: test_bga:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-attachment scroll'

======================================================================
FAIL: test_bgc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-color'

======================================================================
FAIL: test_bgc:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-color transparent'

======================================================================
FAIL: test_bgcp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-clip'

======================================================================
FAIL: test_bgcp:bb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-clip border-box'

======================================================================
FAIL: test_bgcp:cb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-clip content-box'

======================================================================
FAIL: test_bgcp:pb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-clip padding-box'

======================================================================
FAIL: test_bgi: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-image'

======================================================================
FAIL: test_bgi:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-image none'

======================================================================
FAIL: test_bgo: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-origin'

======================================================================
FAIL: test_bgo:bb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-origin border-box'

======================================================================
FAIL: test_bgo:cb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-origin content-box'

======================================================================
FAIL: test_bgo:pb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-origin padding-box'

======================================================================
FAIL: test_bgp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-position'

======================================================================
FAIL: test_bgpx: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-position-x'

======================================================================
FAIL: test_bgpy: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-position-y'

======================================================================
FAIL: test_bgr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat'

======================================================================
FAIL: test_bgr:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat no-repeat'

======================================================================
FAIL: test_bgr:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat repeat'

======================================================================
FAIL: test_bgr:ro (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat round'

======================================================================
FAIL: test_bgr:sp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat space'

======================================================================
FAIL: test_bgr:x (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat repeat-x'

======================================================================
FAIL: test_bgr:y (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-repeat repeat-y'

======================================================================
FAIL: test_bgz: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-size'

======================================================================
FAIL: test_bgz:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-size auto'

======================================================================
FAIL: test_bgz:con (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-size contain'

======================================================================
FAIL: test_bgz:cov (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'background-size cover'

======================================================================
FAIL: test_bln (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-length' and test: 'border-left none'

======================================================================
FAIL: test_bo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin' and test: 'border'

======================================================================
FAIL: test_bocl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-color' and test: 'border-collapse'

======================================================================
FAIL: test_bon (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin' and test: 'border none'

======================================================================
FAIL: test_bos (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow' and test: 'border-style'

======================================================================
FAIL: test_br (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-radius' and test: 'border-right'

======================================================================
FAIL: test_brn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-repeat no-repeat' and test: 'border-right none'

======================================================================
FAIL: test_bs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-sizing'

======================================================================
FAIL: test_bs:bb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-sizing border-box'

======================================================================
FAIL: test_bs:cb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-sizing content-box'

======================================================================
FAIL: test_bsd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style dashed' and test: 'border-style dotted'

======================================================================
FAIL: test_btn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style none' and test: 'border-top none'

======================================================================
FAIL: test_bxdbc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break clone'

======================================================================
FAIL: test_bxdbs (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break slice'

======================================================================
FAIL: test_bxs (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow' and test: 'box-sizing'

======================================================================
FAIL: test_c: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'color'

======================================================================
FAIL: test_cl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clear'

======================================================================
FAIL: test_cl:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clear both'

======================================================================
FAIL: test_cl:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clear left'

======================================================================
FAIL: test_cl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clear none'

======================================================================
FAIL: test_cl:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clear right'

======================================================================
FAIL: test_clpa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'clip auto'

======================================================================
FAIL: test_coi: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'counter-increment'

======================================================================
FAIL: test_conoq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content no-open-quote' and test: 'content open-quote'

======================================================================
FAIL: test_cor: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'counter-reset'

======================================================================
FAIL: test_cp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clip'

======================================================================
FAIL: test_cp:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'clip auto'

======================================================================
FAIL: test_cs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'caption-side'

======================================================================
FAIL: test_cs:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'caption-side bottom'

======================================================================
FAIL: test_cs:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'caption-side top'

======================================================================
FAIL: test_ct (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'content'

======================================================================
FAIL: test_ct: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content'

======================================================================
FAIL: test_ct:cq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content close-quote'

======================================================================
FAIL: test_ct:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content icon'

======================================================================
FAIL: test_ct:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content normal'

======================================================================
FAIL: test_ct:ncq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content no-close-quote'

======================================================================
FAIL: test_ct:noq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content no-open-quote'

======================================================================
FAIL: test_ct:oq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'content open-quote'

======================================================================
FAIL: test_cti (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-increment' and test: 'content icon'

======================================================================
FAIL: test_ctn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'content normal'

======================================================================
FAIL: test_cual (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor default' and test: 'cursor alias'

======================================================================
FAIL: test_cuals (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor all-scroll'

======================================================================
FAIL: test_cuc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor cell'

======================================================================
FAIL: test_cucm (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-increment' and test: 'cursor context-menu'

======================================================================
FAIL: test_cucor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor col-resize'

======================================================================
FAIL: test_cucp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor copy'

======================================================================
FAIL: test_cuer (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor e-resize'

======================================================================
FAIL: test_cuewr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ew-resize'

======================================================================
FAIL: test_cuh (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor help'

======================================================================
FAIL: test_cun (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content counter()' and test: 'cursor none'

======================================================================
FAIL: test_cuna (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'column-gap' and test: 'cursor not-allowed'

======================================================================
FAIL: test_cund (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor no-drop'

======================================================================
FAIL: test_cuner (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-reset' and test: 'cursor ne-resize'

======================================================================
FAIL: test_cuneswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nesw-resize'

======================================================================
FAIL: test_cunr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-reset' and test: 'cursor n-resize'

======================================================================
FAIL: test_cunsr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ns-resize'

======================================================================
FAIL: test_cunwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nw-resize'

======================================================================
FAIL: test_cunwser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nwse-resize'

======================================================================
FAIL: test_cupr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor progress'

======================================================================
FAIL: test_cur: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor'

======================================================================
FAIL: test_cur:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor auto'

======================================================================
FAIL: test_cur:al (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor alias'

======================================================================
FAIL: test_cur:als (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor all-scroll'

======================================================================
FAIL: test_cur:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor cell'

======================================================================
FAIL: test_cur:cm (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor context-menu'

======================================================================
FAIL: test_cur:cor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor col-resize'

======================================================================
FAIL: test_cur:cp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor copy'

======================================================================
FAIL: test_cur:cr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor crosshair'

======================================================================
FAIL: test_cur:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor default'

======================================================================
FAIL: test_cur:er (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor e-resize'

======================================================================
FAIL: test_cur:ewr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ew-resize'

======================================================================
FAIL: test_cur:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor help'

======================================================================
FAIL: test_cur:mv (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor move'

======================================================================
FAIL: test_cur:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor none'

======================================================================
FAIL: test_cur:na (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor not-allowed'

======================================================================
FAIL: test_cur:nd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor no-drop'

======================================================================
FAIL: test_cur:ner (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ne-resize'

======================================================================
FAIL: test_cur:neswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nesw-resize'

======================================================================
FAIL: test_cur:nr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor n-resize'

======================================================================
FAIL: test_cur:nsr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ns-resize'

======================================================================
FAIL: test_cur:nwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nw-resize'

======================================================================
FAIL: test_cur:nwser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nwse-resize'

======================================================================
FAIL: test_cur:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor pointer'

======================================================================
FAIL: test_cur:pr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor progress'

======================================================================
FAIL: test_cur:ror (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor row-resize'

======================================================================
FAIL: test_cur:ser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor se-resize'

======================================================================
FAIL: test_cur:sr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor s-resize'

======================================================================
FAIL: test_cur:swr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor sw-resize'

======================================================================
FAIL: test_cur:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor text'

======================================================================
FAIL: test_cur:vt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor vertical-text'

======================================================================
FAIL: test_cur:w (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor wait'

======================================================================
FAIL: test_cur:wr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor w-resize'

======================================================================
FAIL: test_curor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor' and test: 'cursor row-resize'

======================================================================
FAIL: test_cuser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor se-resize'

======================================================================
FAIL: test_cusr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor' and test: 'cursor s-resize'

======================================================================
FAIL: test_cuswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor sw-resize'

======================================================================
FAIL: test_cuvt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor vertical-text'

======================================================================
FAIL: test_cuw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'column-width' and test: 'cursor wait'

======================================================================
FAIL: test_cuwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor w-resize'

======================================================================
FAIL: test_d: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display'

======================================================================
FAIL: test_d:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display block'

======================================================================
FAIL: test_d:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display compact'

======================================================================
FAIL: test_d:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display flexbox'

======================================================================
FAIL: test_d:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display inline'

======================================================================
FAIL: test_d:ib (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display inline-block'

======================================================================
FAIL: test_d:if (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display inline-flexbox'

======================================================================
FAIL: test_d:it (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display inline-table'

======================================================================
FAIL: test_d:li (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display list-item'

======================================================================
FAIL: test_d:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display none'

======================================================================
FAIL: test_d:ri (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display run-in'

======================================================================
FAIL: test_d:tc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-cell'

======================================================================
FAIL: test_d:tca (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-caption'

======================================================================
FAIL: test_d:tcg (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-column-group'

======================================================================
FAIL: test_d:tco (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-column'

======================================================================
FAIL: test_d:tfg (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-footer-group'

======================================================================
FAIL: test_d:thg (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-header-group'

======================================================================
FAIL: test_d:tr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-row'

======================================================================
FAIL: test_d:trg (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'display table-row-group'

======================================================================
FAIL: test_df (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-footer-group' and test: 'display flexbox'

======================================================================
FAIL: test_dif (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-footer-group' and test: 'display inline-flexbox'

======================================================================
FAIL: test_dir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-row' and test: 'direction'

======================================================================
FAIL: test_dir: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'direction'

======================================================================
FAIL: test_dir:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'direction ltr'

======================================================================
FAIL: test_dir:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'direction rtl'

======================================================================
FAIL: test_dirl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'direction ltr'

======================================================================
FAIL: test_dirr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-row-group' and test: 'direction rtl'

======================================================================
FAIL: test_dtc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_ec: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'empty-cells'

======================================================================
FAIL: test_ec:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'empty-cells hide'

======================================================================
FAIL: test_ec:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'empty-cells show'

======================================================================
FAIL: test_f: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font'

======================================================================
FAIL: test_faa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-smooth always' and test: 'flex-align auto'

======================================================================
FAIL: test_fab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize-position before' and test: 'flex-align baseline'

======================================================================
FAIL: test_fdb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction bt'

======================================================================
FAIL: test_fdbl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block'

======================================================================
FAIL: test_fdbr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block-reverse'

======================================================================
FAIL: test_fdi (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction inline'

======================================================================
FAIL: test_fdir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction inline-reverse'

======================================================================
FAIL: test_fdl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction lr'

======================================================================
FAIL: test_fdr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction rl'

======================================================================
FAIL: test_fdt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction tb'

======================================================================
FAIL: test_ff: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family'

======================================================================
FAIL: test_ff:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family cursive'

======================================================================
FAIL: test_ff:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family fantasy'

======================================================================
FAIL: test_ff:m (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family monospace'

======================================================================
FAIL: test_ff:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family serif'

======================================================================
FAIL: test_ff:ss (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-family sans-serif'

======================================================================
FAIL: test_ffc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family monospace' and test: 'font-family cursive'

======================================================================
FAIL: test_fff (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family serif' and test: 'font-family fantasy'

======================================================================
FAIL: test_fl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'float'

======================================================================
FAIL: test_fl:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'float left'

======================================================================
FAIL: test_fl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'float none'

======================================================================
FAIL: test_fl:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'float right'

======================================================================
FAIL: test_fpc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-pack' and test: 'flex-pack center'

======================================================================
FAIL: test_fpe (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize' and test: 'flex-pack end'

======================================================================
FAIL: test_fpj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack justify'

======================================================================
FAIL: test_fps (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize-style' and test: 'flex-pack start'

======================================================================
FAIL: test_fs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-style'

======================================================================
FAIL: test_fs:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-style italic'

======================================================================
FAIL: test_fs:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-style normal'

======================================================================
FAIL: test_fs:o (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-style oblique'

======================================================================
FAIL: test_fsa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-smooth always' and test: 'font-size-adjust'

======================================================================
FAIL: test_fsan (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-stretch expanded' and test: 'font-size-adjust none'

======================================================================
FAIL: test_fst: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch'

======================================================================
FAIL: test_fst:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch condensed'

======================================================================
FAIL: test_fst:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch expanded'

======================================================================
FAIL: test_fst:ec (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch extra-condensed'

======================================================================
FAIL: test_fst:ee (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch extra-expanded'

======================================================================
FAIL: test_fst:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch normal'

======================================================================
FAIL: test_fst:sc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch semi-condensed'

======================================================================
FAIL: test_fst:se (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch semi-expanded'

======================================================================
FAIL: test_fst:uc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch ultra-condensed'

======================================================================
FAIL: test_fst:ue (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-stretch ultra-expanded'

======================================================================
FAIL: test_fstn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-stretch normal' and test: 'font-style normal'

======================================================================
FAIL: test_fv: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-variant'

======================================================================
FAIL: test_fv:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-variant normal'

======================================================================
FAIL: test_fv:sc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-variant small-caps'

======================================================================
FAIL: test_fw1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 100'

======================================================================
FAIL: test_fw2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 200'

======================================================================
FAIL: test_fw3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 300'

======================================================================
FAIL: test_fw4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 400'

======================================================================
FAIL: test_fw5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 500'

======================================================================
FAIL: test_fw6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 600'

======================================================================
FAIL: test_fw7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 700'

======================================================================
FAIL: test_fw8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 800'

======================================================================
FAIL: test_fw9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 900'

======================================================================
FAIL: test_fw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight'

======================================================================
FAIL: test_fw:1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 100'

======================================================================
FAIL: test_fw:2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 200'

======================================================================
FAIL: test_fw:3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 300'

======================================================================
FAIL: test_fw:4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 400'

======================================================================
FAIL: test_fw:5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 500'

======================================================================
FAIL: test_fw:6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 600'

======================================================================
FAIL: test_fw:7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 700'

======================================================================
FAIL: test_fw:8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 800'

======================================================================
FAIL: test_fw:9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight 900'

======================================================================
FAIL: test_fw:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight bold'

======================================================================
FAIL: test_fw:br (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight bolder'

======================================================================
FAIL: test_fw:lr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight lighter'

======================================================================
FAIL: test_fw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-weight normal'

======================================================================
FAIL: test_fxa: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-align'

======================================================================
FAIL: test_fxa:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-align auto'

======================================================================
FAIL: test_fxa:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-align baseline'

======================================================================
FAIL: test_fxd: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction'

======================================================================
FAIL: test_fxd:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block'

======================================================================
FAIL: test_fxd:br (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block-reverse'

======================================================================
FAIL: test_fxd:bt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction bt'

======================================================================
FAIL: test_fxd:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction inline'

======================================================================
FAIL: test_fxd:ir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction inline-reverse'

======================================================================
FAIL: test_fxd:lr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction lr'

======================================================================
FAIL: test_fxd:rl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction rl'

======================================================================
FAIL: test_fxd:tb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction tb'

======================================================================
FAIL: test_fxo: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-order'

======================================================================
FAIL: test_fxp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack'

======================================================================
FAIL: test_fxp:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack center'

======================================================================
FAIL: test_fxp:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack end'

======================================================================
FAIL: test_fxp:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack justify'

======================================================================
FAIL: test_fxp:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack start'

======================================================================
FAIL: test_fz: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-size'

======================================================================
FAIL: test_fza: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-size-adjust'

======================================================================
FAIL: test_fza:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'font-size-adjust none'

======================================================================
FAIL: test_h: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'height'

======================================================================
FAIL: test_h:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'height auto'

======================================================================
FAIL: test_ha (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'height auto'

======================================================================
FAIL: test_l: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'left'

======================================================================
FAIL: test_l:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'left auto'

======================================================================
FAIL: test_la (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing' and test: 'left auto'

======================================================================
FAIL: test_les: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'letter-spacing'

======================================================================
FAIL: test_les:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'letter-spacing normal'

======================================================================
FAIL: test_lesn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing' and test: 'letter-spacing normal'

======================================================================
FAIL: test_lh: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'line-height'

======================================================================
FAIL: test_lh:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'line-height normal'

======================================================================
FAIL: test_lhn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'line-height normal'

======================================================================
FAIL: test_ls: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style'

======================================================================
FAIL: test_ls:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style none'

======================================================================
FAIL: test_lsi: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-image'

======================================================================
FAIL: test_lsi:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-image none'

======================================================================
FAIL: test_lsp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-position'

======================================================================
FAIL: test_lsp:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-position inside'

======================================================================
FAIL: test_lsp:o (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-position outside'

======================================================================
FAIL: test_lst: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type'

======================================================================
FAIL: test_lst:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type circle'

======================================================================
FAIL: test_lst:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type disc'

======================================================================
FAIL: test_lst:dc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type decimal'

======================================================================
FAIL: test_lst:dclz (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type decimal-leading-zero'

======================================================================
FAIL: test_lst:lr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type lower-roman'

======================================================================
FAIL: test_lst:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type none'

======================================================================
FAIL: test_lst:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type square'

======================================================================
FAIL: test_lst:ur (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'list-style-type upper-roman'

======================================================================
FAIL: test_lstd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type circle' and test: 'list-style-type lower-roman'

======================================================================
FAIL: test_lstu (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type square' and test: 'list-style-type upper-roman'

======================================================================
FAIL: test_m: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin'

======================================================================
FAIL: test_m:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin auto'

======================================================================
FAIL: test_ma (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'margin' and test: 'margin auto'

======================================================================
FAIL: test_mah: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'max-height'

======================================================================
FAIL: test_mah:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'max-height none'

======================================================================
FAIL: test_maw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'max-width'

======================================================================
FAIL: test_maw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'max-width none'

======================================================================
FAIL: test_mb: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-bottom'

======================================================================
FAIL: test_mb:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-bottom auto'

======================================================================
FAIL: test_mba (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-bottom auto'

======================================================================
FAIL: test_mih: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'min-height'

======================================================================
FAIL: test_miw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'min-width'

======================================================================
FAIL: test_ml: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-left'

======================================================================
FAIL: test_ml:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-left auto'

======================================================================
FAIL: test_mla (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-left auto'

======================================================================
FAIL: test_mr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-right'

======================================================================
FAIL: test_mr:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-right auto'

======================================================================
FAIL: test_mra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-right auto'

======================================================================
FAIL: test_mt: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-top'

======================================================================
FAIL: test_mt:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-top auto'

======================================================================
FAIL: test_mta (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-top auto'

======================================================================
FAIL: test_nd: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-down'

======================================================================
FAIL: test_nd:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-down auto'

======================================================================
FAIL: test_nda (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-down auto'

======================================================================
FAIL: test_ni: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-index'

======================================================================
FAIL: test_ni:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-index auto'

======================================================================
FAIL: test_nia (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-index auto'

======================================================================
FAIL: test_nl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-left'

======================================================================
FAIL: test_nl:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-left auto'

======================================================================
FAIL: test_nla (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-left auto'

======================================================================
FAIL: test_nr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-right'

======================================================================
FAIL: test_nr:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-right auto'

======================================================================
FAIL: test_nra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-right auto'

======================================================================
FAIL: test_nu: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-up'

======================================================================
FAIL: test_nu:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-up auto'

======================================================================
FAIL: test_nua (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-up auto'

======================================================================
FAIL: test_o: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline'

======================================================================
FAIL: test_o:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline none'

======================================================================
FAIL: test_oc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-color'

======================================================================
FAIL: test_oc:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-color invert'

======================================================================
FAIL: test_oo: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-offset'

======================================================================
FAIL: test_op: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'opacity'

======================================================================
FAIL: test_or (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'orientation' and test: 'orphans'

======================================================================
FAIL: test_or: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation'

======================================================================
FAIL: test_or:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation auto'

======================================================================
FAIL: test_or:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation landscape'

======================================================================
FAIL: test_or:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation portrait'

======================================================================
FAIL: test_oria (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'orientation' and test: 'orientation auto'

======================================================================
FAIL: test_oril (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow visible' and test: 'orientation landscape'

======================================================================
FAIL: test_orip (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation portrait'

======================================================================
FAIL: test_orp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orphans'

======================================================================
FAIL: test_os: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-style'

======================================================================
FAIL: test_os:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-style none'

======================================================================
FAIL: test_ouc: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-color'

======================================================================
FAIL: test_ouci (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-color invert'

======================================================================
FAIL: test_ouo: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-offset'

======================================================================
FAIL: test_ous: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-style'

======================================================================
FAIL: test_ousn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-style none'

======================================================================
FAIL: test_ouw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-width'

======================================================================
FAIL: test_ov: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow'

======================================================================
FAIL: test_ov:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow auto'

======================================================================
FAIL: test_ov:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow hidden'

======================================================================
FAIL: test_ov:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow scroll'

======================================================================
FAIL: test_ov:v (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow visible'

======================================================================
FAIL: test_ovx: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-x'

======================================================================
FAIL: test_ovx:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-x auto'

======================================================================
FAIL: test_ovx:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-x hidden'

======================================================================
FAIL: test_ovx:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-x scroll'

======================================================================
FAIL: test_ovx:v (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-x visible'

======================================================================
FAIL: test_ovy: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-y'

======================================================================
FAIL: test_ovy:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-y auto'

======================================================================
FAIL: test_ovy:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-y hidden'

======================================================================
FAIL: test_ovy:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-y scroll'

======================================================================
FAIL: test_ovy:v (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'overflow-y visible'

======================================================================
FAIL: test_ow: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-width'

======================================================================
FAIL: test_p: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'padding'

======================================================================
FAIL: test_pb: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'padding-bottom'

======================================================================
FAIL: test_pl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'padding-left'

======================================================================
FAIL: test_pos: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'position'

======================================================================
FAIL: test_pos:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'position absolute'

======================================================================
FAIL: test_pos:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'position fixed'

======================================================================
FAIL: test_pos:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'position relative'

======================================================================
FAIL: test_pos:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'position static'

======================================================================
FAIL: test_pr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'position relative' and test: 'padding-right'

======================================================================
FAIL: test_pr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'padding-right'

======================================================================
FAIL: test_pt: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'padding-top'

======================================================================
FAIL: test_q: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'quotes'

======================================================================
FAIL: test_q:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'quotes none'

======================================================================
FAIL: test_r: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'right'

======================================================================
FAIL: test_r:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'right auto'

======================================================================
FAIL: test_ra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'resize horizontal' and test: 'right auto'

======================================================================
FAIL: test_rz: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'resize'

======================================================================
FAIL: test_rz:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'resize both'

======================================================================
FAIL: test_rz:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'resize horizontal'

======================================================================
FAIL: test_rz:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'resize none'

======================================================================
FAIL: test_rz:v (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'resize vertical'

======================================================================
FAIL: test_t: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'top'

======================================================================
FAIL: test_t:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'top auto'

======================================================================
FAIL: test_ta: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align'

======================================================================
FAIL: test_ta:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align center'

======================================================================
FAIL: test_ta:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align end'

======================================================================
FAIL: test_ta:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align justify'

======================================================================
FAIL: test_ta:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align left'

======================================================================
FAIL: test_ta:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align right'

======================================================================
FAIL: test_ta:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align start'

======================================================================
FAIL: test_tae (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align center' and test: 'text-align end'

======================================================================
FAIL: test_tal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last'

======================================================================
FAIL: test_tal: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last'

======================================================================
FAIL: test_tal:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last auto'

======================================================================
FAIL: test_tal:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last center'

======================================================================
FAIL: test_tal:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last justify'

======================================================================
FAIL: test_tal:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last left'

======================================================================
FAIL: test_tal:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-align-last right'

======================================================================
FAIL: test_talj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tas (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'tab-size' and test: 'text-align start'

======================================================================
FAIL: test_td: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-decoration'

======================================================================
FAIL: test_td:lt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-decoration line-through'

======================================================================
FAIL: test_td:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-decoration none'

======================================================================
FAIL: test_td:o (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-decoration overline'

======================================================================
FAIL: test_td:u (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-decoration underline'

======================================================================
FAIL: test_te: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-emphasis'

======================================================================
FAIL: test_tec (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-emphasis circle' and test: 'text-emphasis-color'

======================================================================
FAIL: test_tec: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-emphasis-color'

======================================================================
FAIL: test_tep: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-emphasis-position'

======================================================================
FAIL: test_tes: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-emphasis-style'

======================================================================
FAIL: test_ti: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-indent'

======================================================================
FAIL: test_ti:el (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-indent each-line'

======================================================================
FAIL: test_ti:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-indent hanging'

======================================================================
FAIL: test_tie (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-indent' and test: 'text-indent each-line'

======================================================================
FAIL: test_tih (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align right' and test: 'text-indent hanging'

======================================================================
FAIL: test_tj: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify'

======================================================================
FAIL: test_tj:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify auto'

======================================================================
FAIL: test_tj:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute'

======================================================================
FAIL: test_tj:dal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-all-lines'

======================================================================
FAIL: test_tj:dcl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-center-last'

======================================================================
FAIL: test_tj:ic (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify inter-cluster'

======================================================================
FAIL: test_tj:ii (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify inter-ideograph'

======================================================================
FAIL: test_tj:iw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify inter-word'

======================================================================
FAIL: test_tj:k (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify kashida'

======================================================================
FAIL: test_tj:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify newspaper'

======================================================================
FAIL: test_tj:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify tibetan'

======================================================================
FAIL: test_tjdal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-all-lines'

======================================================================
FAIL: test_tjdcl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-center-last'

======================================================================
FAIL: test_tjn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-justify tibetan' and test: 'text-justify newspaper'

======================================================================
FAIL: test_tl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'table-layout'

======================================================================
FAIL: test_tl:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'table-layout auto'

======================================================================
FAIL: test_tl:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'table-layout fixed'

======================================================================
FAIL: test_to (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-overflow' and test: 'text-outline'

======================================================================
FAIL: test_to: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-outline'

======================================================================
FAIL: test_to:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-outline none'

======================================================================
FAIL: test_tomc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-transform capitalize' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tome (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-overflow-mode' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tomew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tov: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow'

======================================================================
FAIL: test_tove: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-ellipsis'

======================================================================
FAIL: test_tovm: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode'

======================================================================
FAIL: test_tovm:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tovm:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tovm:ew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tsh: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-shadow'

======================================================================
FAIL: test_tsh:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-shadow none'

======================================================================
FAIL: test_tt: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform'

======================================================================
FAIL: test_tt:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform capitalize'

======================================================================
FAIL: test_tt:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform fullwidth'

======================================================================
FAIL: test_tt:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform lowercase'

======================================================================
FAIL: test_tt:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform none'

======================================================================
FAIL: test_tt:u (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-transform uppercase'

======================================================================
FAIL: test_ttf (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'transition-timing-function' and test: 'text-transform fullwidth'

======================================================================
FAIL: test_tw: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-wrap'

======================================================================
FAIL: test_tw:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-wrap avoid'

======================================================================
FAIL: test_tw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-wrap normal'

======================================================================
FAIL: test_tw:no (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-wrap none'

======================================================================
FAIL: test_tw:u (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-wrap unrestricted'

======================================================================
FAIL: test_twa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap' and test: 'text-wrap avoid'

======================================================================
FAIL: test_twno (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_ub: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi'

======================================================================
FAIL: test_ub:bo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi bidi-override'

======================================================================
FAIL: test_ub:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi embed'

======================================================================
FAIL: test_ub:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi normal'

======================================================================
FAIL: test_ubbo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi bidi-override'

======================================================================
FAIL: test_ube (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi embed'

======================================================================
FAIL: test_ubn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi normal'

======================================================================
FAIL: test_v: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'visibility'

======================================================================
FAIL: test_v:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'visibility collapse'

======================================================================
FAIL: test_v:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'visibility hidden'

======================================================================
FAIL: test_v:v (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'visibility visible'

======================================================================
FAIL: test_va: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align'

======================================================================
FAIL: test_va:ba (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align baseline'

======================================================================
FAIL: test_va:bo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align bottom'

======================================================================
FAIL: test_va:m (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align middle'

======================================================================
FAIL: test_va:sub (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align sub'

======================================================================
FAIL: test_va:sup (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align super'

======================================================================
FAIL: test_va:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align top'

======================================================================
FAIL: test_va:tb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align text-bottom'

======================================================================
FAIL: test_va:tt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'vertical-align text-top'

======================================================================
FAIL: test_vab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'vertical-align baseline' and test: 'vertical-align bottom'

======================================================================
FAIL: test_w: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'width'

======================================================================
FAIL: test_w:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'width auto'

======================================================================
FAIL: test_wa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space' and test: 'width auto'

======================================================================
FAIL: test_whs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space'

======================================================================
FAIL: test_whs:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space normal'

======================================================================
FAIL: test_whs:nw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space nowrap'

======================================================================
FAIL: test_whs:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space pre'

======================================================================
FAIL: test_whs:pl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space pre-line'

======================================================================
FAIL: test_whs:pw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'white-space pre-wrap'

======================================================================
FAIL: test_wid: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'widows'

======================================================================
FAIL: test_wob: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-break'

======================================================================
FAIL: test_wos: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-spacing'

======================================================================
FAIL: test_wos:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-spacing normal'

======================================================================
FAIL: test_wosn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'word-spacing' and test: 'word-spacing normal'

======================================================================
FAIL: test_wow: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-wrap'

======================================================================
FAIL: test_wow:bw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-wrap break-word'

======================================================================
FAIL: test_wow:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-wrap normal'

======================================================================
FAIL: test_wowbw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-wrap break-word'

======================================================================
FAIL: test_wown (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'word-wrap none' and test: 'word-wrap normal'

======================================================================
FAIL: test_wsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space normal' and test: 'white-space nowrap'

======================================================================
FAIL: test_z (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'z-index' and test: 'zoom'

======================================================================
FAIL: test_z: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'z-index'

======================================================================
FAIL: test_z:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'z-index auto'

======================================================================
FAIL: test_za (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'z-index auto' and test: 'zoom auto'

======================================================================
FAIL: test_zo: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'zoom'

======================================================================
FAIL: test_zo:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 20, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 12, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'zoom auto'

----------------------------------------------------------------------
Ran 840 tests in 0.156s

FAILED (failures=567)
