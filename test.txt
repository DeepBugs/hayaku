.FFF..F....FFF.FF..FF......FF.....F.F......F...FFF....F...F....FF....F...........F......F..F..F.....F..........FF........F...FF..FF.F.F...F..F...........F....FF..............F....F....F.......F..F.....FF.....FFFFFF..FFF.FFFFFFFFF.F..FFFFFF..FFF.FFFFFFFFF.FFFFF.FFFFFFF.FFF....F..F....F.........F..FF.FFFF....F..............F.FF.FFFFFFFF..FF...FF..............FFFF...F.FF.F..........F..................FFFFFFFFF.FFFFFFFFF.........FF.FFFFFFFF..FFFF..F..FF..FF..FF..FF.................F.......F..F..F..FF..........FF......FF..FF..FF..FF..FF..FF..FF..FF....F.....FFF.FFF...F..F...F.............................F..............F.........FF............F...F...F.F.F...F....F...F............F.........F.....FF....F...FF....F..........FFF.....FFF.......F....F.....FF..F.F...FFFFFF...............F............FF..........FF..FFFF.F.....F.F...F
======================================================================
FAIL: test_b: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background' and test: 'bottom'

======================================================================
FAIL: test_b:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size auto' and test: 'bottom auto'

======================================================================
FAIL: test_ba (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background'

======================================================================
FAIL: test_baal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment scroll' and test: 'background-attachment local'

======================================================================
FAIL: test_baclc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip no-clip' and test: 'background-clip content-box'

======================================================================
FAIL: test_baclp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip' and test: 'background-clip padding-box'

======================================================================
FAIL: test_bact (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background-color transparent'

======================================================================
FAIL: test_bain (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'break-inside' and test: 'background-image none'

======================================================================
FAIL: test_ban (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background none'

======================================================================
FAIL: test_baoc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-color' and test: 'background-origin content-box'

======================================================================
FAIL: test_baop (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-position' and test: 'background-origin padding-box'

======================================================================
FAIL: test_barro (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment scroll' and test: 'background-repeat round'

======================================================================
FAIL: test_bars (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size' and test: 'background-repeat space'

======================================================================
FAIL: test_basico (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size contain' and test: 'background-size cover'

======================================================================
FAIL: test_bbc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-break continuous' and test: 'border-bottom-color'

======================================================================
FAIL: test_bd:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-bottom none' and test: 'border none'

======================================================================
FAIL: test_bdbr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-break' and test: 'box-decoration-break'

======================================================================
FAIL: test_bdbr:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-break close' and test: 'box-decoration-break clone'

======================================================================
FAIL: test_bdbr:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-break close' and test: 'box-decoration-break slice'

======================================================================
FAIL: test_bdcl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-color' and test: 'border-collapse'

======================================================================
FAIL: test_bdl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-left-style none' and test: 'border-left none'

======================================================================
FAIL: test_bdr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-radius' and test: 'border-right'

======================================================================
FAIL: test_bdr:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-right-style none' and test: 'border-right none'

======================================================================
FAIL: test_bds: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-spacing' and test: 'border-style'

======================================================================
FAIL: test_bdt:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-top-style none' and test: 'border-top none'

======================================================================
FAIL: test_bg:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-break continuous' and test: 'background none'

======================================================================
FAIL: test_bga:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment scroll' and test: 'background-attachment local'

======================================================================
FAIL: test_bgc:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip content-box' and test: 'background-color transparent'

======================================================================
FAIL: test_bgi:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin content-box' and test: 'background-image none'

======================================================================
FAIL: test_bgr:ro (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin border-box' and test: 'background-repeat round'

======================================================================
FAIL: test_bgr:sp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'sp' and test: 'background-repeat space'

======================================================================
FAIL: test_bln (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-length' and test: 'border-left none'

======================================================================
FAIL: test_bo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin' and test: 'border'

======================================================================
FAIL: test_bocl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-color' and test: 'border-collapse'

======================================================================
FAIL: test_bon (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin' and test: 'border none'

======================================================================
FAIL: test_bos (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow' and test: 'border-style'

======================================================================
FAIL: test_br (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-radius' and test: 'border-right'

======================================================================
FAIL: test_brn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-repeat no-repeat' and test: 'border-right none'

======================================================================
FAIL: test_bs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow' and test: 'box-sizing'

======================================================================
FAIL: test_bsd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style dashed' and test: 'border-style dotted'

======================================================================
FAIL: test_btn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-bottom none' and test: 'border-top none'

======================================================================
FAIL: test_bxdbc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break clone'

======================================================================
FAIL: test_bxdbs (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'box-decoration-break slice'

======================================================================
FAIL: test_clpa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'clip auto'

======================================================================
FAIL: test_conoq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content no-open-quote' and test: 'content open-quote'

======================================================================
FAIL: test_cp:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'clip auto'

======================================================================
FAIL: test_ct (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'content'

======================================================================
FAIL: test_ct:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'i' and test: 'content icon'

======================================================================
FAIL: test_cti (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-increment' and test: 'content icon'

======================================================================
FAIL: test_ctn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'color transparent' and test: 'content normal'

======================================================================
FAIL: test_cual (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor default' and test: 'cursor alias'

======================================================================
FAIL: test_cuals (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor all-scroll'

======================================================================
FAIL: test_cuc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor cell'

======================================================================
FAIL: test_cucm (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-increment' and test: 'cursor context-menu'

======================================================================
FAIL: test_cucor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor col-resize'

======================================================================
FAIL: test_cucp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor copy'

======================================================================
FAIL: test_cuer (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor e-resize'

======================================================================
FAIL: test_cuewr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ew-resize'

======================================================================
FAIL: test_cuh (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor help'

======================================================================
FAIL: test_cun (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content counter()' and test: 'cursor none'

======================================================================
FAIL: test_cuna (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'column-gap' and test: 'cursor not-allowed'

======================================================================
FAIL: test_cund (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor no-drop'

======================================================================
FAIL: test_cuner (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-reset' and test: 'cursor ne-resize'

======================================================================
FAIL: test_cuneswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nesw-resize'

======================================================================
FAIL: test_cunr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'counter-reset' and test: 'cursor n-resize'

======================================================================
FAIL: test_cunsr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor ns-resize'

======================================================================
FAIL: test_cunwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nw-resize'

======================================================================
FAIL: test_cunwser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor nwse-resize'

======================================================================
FAIL: test_cupr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor progress'

======================================================================
FAIL: test_cur:al (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor default' and test: 'cursor alias'

======================================================================
FAIL: test_cur:als (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'als' and test: 'cursor all-scroll'

======================================================================
FAIL: test_cur:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor cell'

======================================================================
FAIL: test_cur:cm (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cm' and test: 'cursor context-menu'

======================================================================
FAIL: test_cur:cor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor col-resize'

======================================================================
FAIL: test_cur:cp (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cp' and test: 'cursor copy'

======================================================================
FAIL: test_cur:er (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor e-resize'

======================================================================
FAIL: test_cur:ewr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'ewr' and test: 'cursor ew-resize'

======================================================================
FAIL: test_cur:h (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor help'

======================================================================
FAIL: test_cur:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor none'

======================================================================
FAIL: test_cur:na (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'na' and test: 'cursor not-allowed'

======================================================================
FAIL: test_cur:nd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor hand' and test: 'cursor no-drop'

======================================================================
FAIL: test_cur:ner (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor ne-resize'

======================================================================
FAIL: test_cur:neswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'neswr' and test: 'cursor nesw-resize'

======================================================================
FAIL: test_cur:nr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor n-resize'

======================================================================
FAIL: test_cur:nsr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'nsr' and test: 'cursor ns-resize'

======================================================================
FAIL: test_cur:nwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'nwr' and test: 'cursor nw-resize'

======================================================================
FAIL: test_cur:nwser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'nwser' and test: 'cursor nwse-resize'

======================================================================
FAIL: test_cur:pr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor progress'

======================================================================
FAIL: test_cur:ror (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor row-resize'

======================================================================
FAIL: test_cur:ser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'ser' and test: 'cursor se-resize'

======================================================================
FAIL: test_cur:sr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor crosshair' and test: 'cursor s-resize'

======================================================================
FAIL: test_cur:swr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'swr' and test: 'cursor sw-resize'

======================================================================
FAIL: test_cur:vt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'vt' and test: 'cursor vertical-text'

======================================================================
FAIL: test_cur:w (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'w' and test: 'cursor wait'

======================================================================
FAIL: test_cur:wr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'wr' and test: 'cursor w-resize'

======================================================================
FAIL: test_curor (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor' and test: 'cursor row-resize'

======================================================================
FAIL: test_cuser (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'cursor se-resize'

======================================================================
FAIL: test_cusr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor' and test: 'cursor s-resize'

======================================================================
FAIL: test_cuswr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor sw-resize'

======================================================================
FAIL: test_cuvt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor vertical-text'

======================================================================
FAIL: test_cuw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'column-width' and test: 'cursor wait'

======================================================================
FAIL: test_cuwr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'cursor w-resize'

======================================================================
FAIL: test_d:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-footer-group' and test: 'display flexbox'

======================================================================
FAIL: test_d:if (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'if' and test: 'display inline-flexbox'

======================================================================
FAIL: test_d:tc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_df (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-footer-group' and test: 'display flexbox'

======================================================================
FAIL: test_dif (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-footer-group' and test: 'display inline-flexbox'

======================================================================
FAIL: test_dir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-row' and test: 'direction'

======================================================================
FAIL: test_dir:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'l' and test: 'direction ltr'

======================================================================
FAIL: test_dir:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'r' and test: 'direction rtl'

======================================================================
FAIL: test_dirl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'direction ltr'

======================================================================
FAIL: test_dirr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-row-group' and test: 'direction rtl'

======================================================================
FAIL: test_dtc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_f: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'float' and test: 'font'

======================================================================
FAIL: test_faa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-smooth always' and test: 'flex-align auto'

======================================================================
FAIL: test_fab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize-position before' and test: 'flex-align baseline'

======================================================================
FAIL: test_fdb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction bt'

======================================================================
FAIL: test_fdbl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block'

======================================================================
FAIL: test_fdbr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction block-reverse'

======================================================================
FAIL: test_fdi (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction inline'

======================================================================
FAIL: test_fdir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction inline-reverse'

======================================================================
FAIL: test_fdl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-direction lr'

======================================================================
FAIL: test_fdr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction rl'

======================================================================
FAIL: test_fdt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction' and test: 'flex-direction tb'

======================================================================
FAIL: test_ff:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family monospace' and test: 'font-family cursive'

======================================================================
FAIL: test_ff:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family serif' and test: 'font-family fantasy'

======================================================================
FAIL: test_ffc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family monospace' and test: 'font-family cursive'

======================================================================
FAIL: test_fff (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-family serif' and test: 'font-family fantasy'

======================================================================
FAIL: test_fpc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-pack' and test: 'flex-pack center'

======================================================================
FAIL: test_fpe (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize' and test: 'flex-pack end'

======================================================================
FAIL: test_fpj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'flex-pack justify'

======================================================================
FAIL: test_fps (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-emphasize-style' and test: 'flex-pack start'

======================================================================
FAIL: test_fs:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-smooth nover' and test: 'font-style normal'

======================================================================
FAIL: test_fsa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-smooth always' and test: 'font-size-adjust'

======================================================================
FAIL: test_fsan (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-stretch expanded' and test: 'font-size-adjust none'

======================================================================
FAIL: test_fst: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-style' and test: 'font-stretch'

======================================================================
FAIL: test_fstn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-stretch normal' and test: 'font-style normal'

======================================================================
FAIL: test_fw1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 100'

======================================================================
FAIL: test_fw2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 200'

======================================================================
FAIL: test_fw3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 300'

======================================================================
FAIL: test_fw4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 400'

======================================================================
FAIL: test_fw5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 500'

======================================================================
FAIL: test_fw6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 600'

======================================================================
FAIL: test_fw7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 700'

======================================================================
FAIL: test_fw8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 800'

======================================================================
FAIL: test_fw9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight' and test: 'font-weight 900'

======================================================================
FAIL: test_fw:1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 1' and test: 'font-weight 100'

======================================================================
FAIL: test_fw:2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 2' and test: 'font-weight 200'

======================================================================
FAIL: test_fw:3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 3' and test: 'font-weight 300'

======================================================================
FAIL: test_fw:4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 4' and test: 'font-weight 400'

======================================================================
FAIL: test_fw:5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 5' and test: 'font-weight 500'

======================================================================
FAIL: test_fw:6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 6' and test: 'font-weight 600'

======================================================================
FAIL: test_fw:7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 7' and test: 'font-weight 700'

======================================================================
FAIL: test_fw:8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 8' and test: 'font-weight 800'

======================================================================
FAIL: test_fw:9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 9' and test: 'font-weight 900'

======================================================================
FAIL: test_fxa:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'flex-align auto'

======================================================================
FAIL: test_fxa:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'b' and test: 'flex-align baseline'

======================================================================
FAIL: test_fxd:b (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'b' and test: 'flex-direction block'

======================================================================
FAIL: test_fxd:br (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'br' and test: 'flex-direction block-reverse'

======================================================================
FAIL: test_fxd:bt (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'bt' and test: 'flex-direction bt'

======================================================================
FAIL: test_fxd:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'i' and test: 'flex-direction inline'

======================================================================
FAIL: test_fxd:ir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'ir' and test: 'flex-direction inline-reverse'

======================================================================
FAIL: test_fxd:lr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'lr' and test: 'flex-direction lr'

======================================================================
FAIL: test_fxd:rl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'rl' and test: 'flex-direction rl'

======================================================================
FAIL: test_fxd:tb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'tb' and test: 'flex-direction tb'

======================================================================
FAIL: test_fxp:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'c' and test: 'flex-pack center'

======================================================================
FAIL: test_fxp:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'e' and test: 'flex-pack end'

======================================================================
FAIL: test_fxp:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'j' and test: 'flex-pack justify'

======================================================================
FAIL: test_fxp:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 's' and test: 'flex-pack start'

======================================================================
FAIL: test_fza:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'n' and test: 'font-size-adjust none'

======================================================================
FAIL: test_h:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'height auto'

======================================================================
FAIL: test_ha (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'height auto'

======================================================================
FAIL: test_l:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'left auto'

======================================================================
FAIL: test_la (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing' and test: 'left auto'

======================================================================
FAIL: test_les:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-position inside' and test: 'letter-spacing normal'

======================================================================
FAIL: test_lesn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing' and test: 'letter-spacing normal'

======================================================================
FAIL: test_lh:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'n' and test: 'line-height normal'

======================================================================
FAIL: test_lhn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'line-height normal'

======================================================================
FAIL: test_lst:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type circle' and test: 'list-style-type lower-roman'

======================================================================
FAIL: test_lstu (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type square' and test: 'list-style-type upper-roman'

======================================================================
FAIL: test_m:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'margin auto'

======================================================================
FAIL: test_ma (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'margin' and test: 'margin auto'

======================================================================
FAIL: test_mb:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'margin-bottom auto'

======================================================================
FAIL: test_mba (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-bottom auto'

======================================================================
FAIL: test_ml:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'margin-left auto'

======================================================================
FAIL: test_mla (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-left auto'

======================================================================
FAIL: test_mr:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'margin-right auto'

======================================================================
FAIL: test_mra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-right auto'

======================================================================
FAIL: test_mt:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'margin-top auto'

======================================================================
FAIL: test_mta (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'margin-top auto'

======================================================================
FAIL: test_nd:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'nav-down auto'

======================================================================
FAIL: test_nda (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-down auto'

======================================================================
FAIL: test_ni:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'nav-index auto'

======================================================================
FAIL: test_nia (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-index auto'

======================================================================
FAIL: test_nl:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'nav-left auto'

======================================================================
FAIL: test_nla (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-left auto'

======================================================================
FAIL: test_nr:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'nav-right auto'

======================================================================
FAIL: test_nra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-right auto'

======================================================================
FAIL: test_nu:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'nav-up auto'

======================================================================
FAIL: test_nua (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'nav-up auto'

======================================================================
FAIL: test_oc:i (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'i' and test: 'outline-color invert'

======================================================================
FAIL: test_or:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow auto' and test: 'orientation auto'

======================================================================
FAIL: test_or:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow scroll' and test: 'orientation landscape'

======================================================================
FAIL: test_or:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow-style panner' and test: 'orientation portrait'

======================================================================
FAIL: test_oria (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'orientation' and test: 'orientation auto'

======================================================================
FAIL: test_oril (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow visible' and test: 'orientation landscape'

======================================================================
FAIL: test_orip (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation portrait'

======================================================================
FAIL: test_os:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow-style panner' and test: 'outline-style none'

======================================================================
FAIL: test_ouci (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-color invert'

======================================================================
FAIL: test_ousn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'outline-style none'

======================================================================
FAIL: test_p: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'position' and test: 'padding'

======================================================================
FAIL: test_pr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'position relative' and test: 'padding-right'

======================================================================
FAIL: test_r:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'resize horizontal' and test: 'right auto'

======================================================================
FAIL: test_ra (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'resize horizontal' and test: 'right auto'

======================================================================
FAIL: test_t:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'table-layout auto' and test: 'top auto'

======================================================================
FAIL: test_ta:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align center' and test: 'text-align end'

======================================================================
FAIL: test_ta:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align start'

======================================================================
FAIL: test_tae (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align center' and test: 'text-align end'

======================================================================
FAIL: test_tal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last'

======================================================================
FAIL: test_tal:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_talj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tas (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'tab-size' and test: 'text-align start'

======================================================================
FAIL: test_tec (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-emphasis circle' and test: 'text-emphasis-color'

======================================================================
FAIL: test_tie (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-indent' and test: 'text-indent each-line'

======================================================================
FAIL: test_tj:dal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'dal' and test: 'text-justify distribute-all-lines'

======================================================================
FAIL: test_tj:dcl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'dcl' and test: 'text-justify distribute-center-last'

======================================================================
FAIL: test_tj:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-justify tibetan' and test: 'text-justify newspaper'

======================================================================
FAIL: test_tjdal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-all-lines'

======================================================================
FAIL: test_tjdcl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-justify distribute-center-last'

======================================================================
FAIL: test_tjn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-justify tibetan' and test: 'text-justify newspaper'

======================================================================
FAIL: test_tomc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-transform capitalize' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tome (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-overflow-mode' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tomew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tovm:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'c' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tovm:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'e' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tovm:ew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'ew' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tt:f (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'table-layout fixed' and test: 'text-transform fullwidth'

======================================================================
FAIL: test_ttf (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'transition-timing-function' and test: 'text-transform fullwidth'

======================================================================
FAIL: test_tw:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap normal' and test: 'text-wrap avoid'

======================================================================
FAIL: test_tw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_twa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap' and test: 'text-wrap avoid'

======================================================================
FAIL: test_twno (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_ub:bo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'bo' and test: 'unicode-bidi bidi-override'

======================================================================
FAIL: test_ub:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'e' and test: 'unicode-bidi embed'

======================================================================
FAIL: test_ub:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'n' and test: 'unicode-bidi normal'

======================================================================
FAIL: test_ubbo (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi bidi-override'

======================================================================
FAIL: test_ube (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi embed'

======================================================================
FAIL: test_ubn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'unicode-bidi normal'

======================================================================
FAIL: test_vab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'vertical-align baseline' and test: 'vertical-align bottom'

======================================================================
FAIL: test_w:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space normal' and test: 'width auto'

======================================================================
FAIL: test_wa (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space' and test: 'width auto'

======================================================================
FAIL: test_wos:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space-collapse normal' and test: 'word-spacing normal'

======================================================================
FAIL: test_wosn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'word-spacing' and test: 'word-spacing normal'

======================================================================
FAIL: test_wow:bw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'bw' and test: 'word-wrap break-word'

======================================================================
FAIL: test_wow:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'word-wrap none' and test: 'word-wrap normal'

======================================================================
FAIL: test_wowbw (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'word-wrap break-word'

======================================================================
FAIL: test_wown (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'word-wrap none' and test: 'word-wrap normal'

======================================================================
FAIL: test_wsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space normal' and test: 'white-space nowrap'

======================================================================
FAIL: test_z: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'zoom' and test: 'z-index'

======================================================================
FAIL: test_za (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'z-index auto' and test: 'zoom auto'

======================================================================
FAIL: test_zo:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'a' and test: 'zoom auto'

----------------------------------------------------------------------
Ran 833 tests in 0.105s

FAILED (failures=263)
