
======================================================================
FAIL: test_bacl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment local' and test: 'background-clip'

======================================================================
FAIL: test_bact (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background-color transparent'

======================================================================
FAIL: test_ban (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-attachment' and test: 'background none'

======================================================================
FAIL: test_bao (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'bottom auto' and test: 'background-origin'

======================================================================
FAIL: test_basico (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-size contain' and test: 'background-size cover'

======================================================================
FAIL: test_bbn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-bottom-style none' and test: 'border-bottom none'

======================================================================
FAIL: test_bd: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style dashed' and test: 'border'

======================================================================
FAIL: test_bd:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style none' and test: 'border none'

======================================================================
FAIL: test_bdb:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-bottom-style none' and test: 'border-bottom none'

======================================================================
FAIL: test_bdbr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-break' and test: 'box-decoration-break'

======================================================================
FAIL: test_bdbr:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-bottom-color <color>' and test: 'box-decoration-break clone'

======================================================================
FAIL: test_bdbr:s (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 's' and test: 'box-decoration-break slice'

======================================================================
FAIL: test_bdcl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-color' and test: 'border-collapse'

======================================================================
FAIL: test_bdl:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-left-style none' and test: 'border-left none'

======================================================================
FAIL: test_bdr:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-radius <length>' and test: 'border-right none'

======================================================================
FAIL: test_bdt:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-width thin' and test: 'border-top none'

======================================================================
FAIL: test_bg: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style groove' and test: 'background'

======================================================================
FAIL: test_bg:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-image none' and test: 'background none'

======================================================================
FAIL: test_bgc:t (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip content-box' and test: 'background-color transparent'

======================================================================
FAIL: test_bgcp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-clip padding-box' and test: 'background-clip'

======================================================================
FAIL: test_bgr: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style groove' and test: 'background-repeat'

======================================================================
FAIL: test_bln (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-length' and test: 'border-left none'

======================================================================
FAIL: test_bocl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-color' and test: 'border-collapse'

======================================================================
FAIL: test_bon (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-origin' and test: 'border none'

======================================================================
FAIL: test_brn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-repeat no-repeat' and test: 'border-right none'

======================================================================
FAIL: test_brs (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'background-repeat space' and test: 'border-right-style'

======================================================================
FAIL: test_bs: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow' and test: 'box-sizing'

======================================================================
FAIL: test_bsd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-style dashed' and test: 'border-style dotted'

======================================================================
FAIL: test_bsi (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'box-shadow inset' and test: 'border-style inset'

======================================================================
FAIL: test_btn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'border-width thin' and test: 'border-top none'

======================================================================
FAIL: test_cl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'clear left' and test: 'clear'

======================================================================
FAIL: test_cn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor none' and test: 'clear none'

======================================================================
FAIL: test_coi: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content icon' and test: 'counter-increment'

======================================================================
FAIL: test_con (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_conoq (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content no-open-quote' and test: 'content open-quote'

======================================================================
FAIL: test_cour (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content url()' and test: 'counter-reset'

======================================================================
FAIL: test_cp: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor pointer' and test: 'clip'

======================================================================
FAIL: test_ct:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_ctn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'content none' and test: 'content normal'

======================================================================
FAIL: test_cu (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor url()' and test: 'cursor'

======================================================================
FAIL: test_cua (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor alias' and test: 'cursor auto'

======================================================================
FAIL: test_cucr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor col-resize' and test: 'cursor crosshair'

======================================================================
FAIL: test_cur: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor url()' and test: 'cursor'

======================================================================
FAIL: test_cur:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor alias' and test: 'cursor auto'

======================================================================
FAIL: test_cur:cr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'cursor col-resize' and test: 'cursor crosshair'

======================================================================
FAIL: test_d:tc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_dir (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'direction rtl' and test: 'direction'

======================================================================
FAIL: test_dir: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'direction rtl' and test: 'direction'

======================================================================
FAIL: test_dtc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'display table-caption' and test: 'display table-cell'

======================================================================
FAIL: test_fdb (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'flex-direction block' and test: 'flex-direction bt'

======================================================================
FAIL: test_fl: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'float left' and test: 'float'

======================================================================
FAIL: test_fst: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-style' and test: 'font-stretch'

======================================================================
FAIL: test_fst:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-style normal' and test: 'font-stretch normal'

======================================================================
FAIL: test_fw1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 1' and test: 'font-weight 100'

======================================================================
FAIL: test_fw2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 2' and test: 'font-weight 200'

======================================================================
FAIL: test_fw3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 3' and test: 'font-weight 300'

======================================================================
FAIL: test_fw4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 4' and test: 'font-weight 400'

======================================================================
FAIL: test_fw5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 5' and test: 'font-weight 500'

======================================================================
FAIL: test_fw6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 6' and test: 'font-weight 600'

======================================================================
FAIL: test_fw7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 7' and test: 'font-weight 700'

======================================================================
FAIL: test_fw8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 8' and test: 'font-weight 800'

======================================================================
FAIL: test_fw9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 9' and test: 'font-weight 900'

======================================================================
FAIL: test_fw:1 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 1' and test: 'font-weight 100'

======================================================================
FAIL: test_fw:2 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 2' and test: 'font-weight 200'

======================================================================
FAIL: test_fw:3 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 3' and test: 'font-weight 300'

======================================================================
FAIL: test_fw:4 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 4' and test: 'font-weight 400'

======================================================================
FAIL: test_fw:5 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 5' and test: 'font-weight 500'

======================================================================
FAIL: test_fw:6 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 6' and test: 'font-weight 600'

======================================================================
FAIL: test_fw:7 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 7' and test: 'font-weight 700'

======================================================================
FAIL: test_fw:8 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 8' and test: 'font-weight 800'

======================================================================
FAIL: test_fw:9 (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'font-weight 9' and test: 'font-weight 900'

======================================================================
FAIL: test_ls:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing normal' and test: 'list-style none'

======================================================================
FAIL: test_lsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'letter-spacing normal' and test: 'list-style none'

======================================================================
FAIL: test_lst:d (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstd (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type decimal' and test: 'list-style-type disc'

======================================================================
FAIL: test_lstl (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type lower-alpha' and test: 'list-style-type lower-roman'

======================================================================
FAIL: test_lstu (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'list-style-type upper-alpha' and test: 'list-style-type upper-roman'

======================================================================
FAIL: test_o:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow hidden' and test: 'outline none'

======================================================================
FAIL: test_or:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow auto' and test: 'orientation auto'

======================================================================
FAIL: test_or:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow scroll' and test: 'orientation landscape'

======================================================================
FAIL: test_or:p (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'p' and test: 'orientation portrait'

======================================================================
FAIL: test_oria (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'orientation' and test: 'orientation auto'

======================================================================
FAIL: test_oril (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow visible' and test: 'orientation landscape'

======================================================================
FAIL: test_orip (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'orientation portrait'

======================================================================
FAIL: test_os: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow scroll' and test: 'outline-style'

======================================================================
FAIL: test_os:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'orphans <integer>' and test: 'outline-style none'

======================================================================
FAIL: test_oun (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'outline' and test: 'outline none'

======================================================================
FAIL: test_ousn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'outline-offset <length>' and test: 'outline-style none'

======================================================================
FAIL: test_ov: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'overflow visible' and test: 'overflow'

======================================================================
FAIL: test_pos: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'position static' and test: 'position'

======================================================================
FAIL: test_ta (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'top auto' and test: 'text-align'

======================================================================
FAIL: test_ta: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'top auto' and test: 'text-align'

======================================================================
FAIL: test_tal (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last'

======================================================================
FAIL: test_tal: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last'

======================================================================
FAIL: test_tal:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align center' and test: 'text-align-last center'

======================================================================
FAIL: test_tal:j (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tal:l (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last left'

======================================================================
FAIL: test_tal:r (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align right' and test: 'text-align-last right'

======================================================================
FAIL: test_talc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align center' and test: 'text-align-last center'

======================================================================
FAIL: test_talj (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align justify' and test: 'text-align-last justify'

======================================================================
FAIL: test_tall (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align left' and test: 'text-align-last left'

======================================================================
FAIL: test_talr (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-align right' and test: 'text-align-last right'

======================================================================
FAIL: test_tomc (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-transform capitalize' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tome (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-overflow-mode' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tomew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: '' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tove: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-overflow ellipsis' and test: 'text-overflow-ellipsis'

======================================================================
FAIL: test_tovm:c (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'c' and test: 'text-overflow-mode clip'

======================================================================
FAIL: test_tovm:e (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'e' and test: 'text-overflow-mode ellipsis'

======================================================================
FAIL: test_tovm:ew (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'ew' and test: 'text-overflow-mode ellipsis-word'

======================================================================
FAIL: test_tw:n (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_twno (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'text-wrap none' and test: 'text-wrap normal'

======================================================================
FAIL: test_vab (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'vertical-align baseline' and test: 'vertical-align bottom'

======================================================================
FAIL: test_wsn (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'white-space normal' and test: 'white-space nowrap'

======================================================================
FAIL: test_z: (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'zoom' and test: 'z-index'

======================================================================
FAIL: test_z:a (__main__.AbbrTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "test.py", line 23, in <lambda>
    return lambda self: self.is_eq(a, b)
  File "test.py", line 15, in is_eq
    self.assertEqual(hayaku, test_value, "hayaku: '{0}' and test: '{1}'".format(hayaku, test_value))
AssertionError: hayaku: 'zoom auto' and test: 'z-index auto'

----------------------------------------------------------------------
Ran 833 tests in 0.064s

FAILED (failures=115)
